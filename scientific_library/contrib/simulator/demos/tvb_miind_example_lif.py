###########################################
# TVB_MIIND_EXAMPLE_LIF.py
# Requires MIIND (miind.sourceforge.net) to be installed. 
# In ../files/miind run miindio.py and call submit-python to generate the liblif.so file required for this demonstration.
# The generated file liblif.so as well as lif.model and lif_0.01_0_0_0_.mat must be copied to this directory
##########################################

import pylab
import numpy
import matplotlib.pyplot as plt
import uuid
import os

# Comment out MPI, comm and rank lines below if not using
# MPI (MIIND must also have MPI disabled)
#######################
from mpi4py import MPI

comm = MPI.COMM_WORLD
rank = comm.Get_rank()
#######################

from tvb.simulator.lab import *

# Add the contributed models directory to the PYTHONPATH
sys.path += ["../models"]

from miindtvbmodel import Miind

# Change the working directory to the location of the generated python library liblif.so
os.chdir("../files/miind/lif/lif")

white_matter = connectivity.Connectivity().from_file()
white_matter.speed = numpy.array([4.0])

# Currently, the Connectivity.number_of_regions is unavailable when loaded from
# a source file (as with the default) so we manually set 76 here
# Alternatively, len(Connectivity.region_labels) can be used.
#
# The Miind model class constructor takes :
#
# The filename of a shared library in the cwd which implements the MIIND simulation
# The number of nodes in the connectivity
#
# liblif.so must be generated by running MIIND and calling submit-python to build the shared python library
# An example lif.xml is provided in the ../files/miind directory. 
model = Miind('liblif.so',76)

white_matter_coupling = coupling.Linear(a=numpy.array([0.0154,]))

# Many Miind models have a fixed time step defined in the mesh. TVB must match this
# value to avoid an incorrect time scale.
# Also note that the Miind model expects the Identity integrator similar to
# the Wong-Wang model.
integrator = integrators.Identity(dt = model.miind_time_step)

mon_raw = monitors.Raw()
mon_tavg = monitors.TemporalAverage(period=model.miind_time_step*20)
what_to_watch = (mon_raw, mon_tavg)

sim = simulator.Simulator(model = model, connectivity = white_matter,
                  coupling = white_matter_coupling,
                  integrator = integrator, monitors = what_to_watch)

sim.configure()

raw_data = []
raw_time = []
tavg_data = []
tavg_time = []

for raw, tavg in sim(simulation_length=model.simulation_length):
	if not raw is None:
	    raw_time.append(raw[0])
	    raw_data.append(raw[1])
	if not tavg is None:
	    tavg_time.append(tavg[0])
	    tavg_data.append(tavg[1])

RAW = numpy.array(raw_data)
TAVG = numpy.array(tavg_data)

plt.figure(1)
plt.plot(raw_time, RAW[:, 0, :, 0])
plt.title("Simple LIF Neuron Population Mean Firing Rate \nUsing the MIIND Adapter model in TVB")
plt.ylabel("Firing Rate (Hz)")
plt.xlabel("Time (s)")

plt.figure(2)
plt.plot(tavg_time, TAVG[:, 0, :, 0])
plt.title("Simple LIF Neuron Population Mean Firing Rate \nUsing the MIIND Adapter model in TVB (Time Averaged)")
plt.ylabel("Firing Rate (Hz)")
plt.xlabel("Time (s)")

plt.show()
